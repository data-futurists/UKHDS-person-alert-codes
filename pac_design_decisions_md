# Person Alert Code  
**Design Decisions**  
**Proposed Sector-Wide Standard for Housing Providers (HACT/MHCLG aligned)**  
**Version:** Draft v1.0  
**Prepared by:** Elena Iurco  
**Date:** 25 July 2025  

---

## Table: `person_alert`

### `person_alert_id`
- **What:** Unique identifier for each alert instance.  
- **Design:** Auto-incrementing integer primary key.  
- **Value:** Ensures each alert is uniquely identifiable for database integrity and traceability.  
- **Alternatives:** None — this is fundamental to the table’s function.

---

### `person_id`
- **What:** Reference to the person the alert applies to.  
- **Design:** Mandatory foreign key (NOT NULL) linking to the `person` table.  
- **Value:** Ties alerts directly to individuals for accurate data management.  
- **Alternatives:** None.

---

### `alert_code_id`
- **What:** Reference to the standardised alert code from `person_alert_codes`.  
- **Design:** Mandatory foreign key.  
- **Value:** Ensures consistent classification of alert types for analytics and action.  
- **Questions:** Should we allow local custom alert codes outside the core list?  
- **Alternatives:** Embedding codes as text — rejected to preserve data consistency.

---

### `alert_description`
- **What:** Case-specific notes for this alert instance.  
- **Design:** Optional free text.  
- **Value:** Allows staff to record context not captured by structured data.  
- **Questions:** How to prevent entry of sensitive or irrelevant info?  
- **Alternatives:** None yet defined.

---

### `alert_source`
- **What:** The origin of the alert information (e.g. NHS, Self-reported).  
- **Design:** Optional `VARCHAR(100)`.  
- **Value:** Indicates the reliability and traceability of the alert.  
- **Questions:** Should this be a code list instead of free text?  
- **Alternatives:** None yet defined.

---

### `created_by`
- **What:** Name of the person who created the alert.  
- **Design:** Optional `VARCHAR(100)`.  
- **Value:** Supports audit trail and accountability.  
- **Questions:** Should we store user IDs instead of names?  
- **Alternatives:** Capturing both name and internal user ID.

---

### `source_description`
- **What:** More detail about the source, e.g. clinician or agency.  
- **Design:** Optional `TEXT`.  
- **Value:** Helps verify or follow up on the alert.  
- **Questions:** How much personal info is appropriate here?  
- **Alternatives:** None yet defined.

---

### `informed_resident`
- **What:** Whether the tenant has been informed.  
- **Design:** Boolean, default `FALSE`.  
- **Value:** Supports communication and consent tracking.  
- **Questions:** Should this be mandatory before activating an alert?  
- **Alternatives:** Full communication log in separate table.

---

### `alert_progress`
- **What:** Trend or trajectory of the alert (e.g. Stable, Deteriorating).  
- **Design:** Coded `VARCHAR(20)` with `CHECK` constraint.  
- **Value:** Enables prioritisation and trend analysis.  
- **Questions:** Should this be manually updated or derived from history?  
- **Alternatives:** None yet defined.

---

### `alert_duration_type`
- **What:** Expected duration category.  
- **Design:** Controlled list: `'Long Term'`, `'Temporary'`, `'Unknown'`.  
- **Value:** Informs support planning and review timelines.  
- **Questions:** Allow custom values?  
- **Alternatives:** Using a boolean (`is_temporary`) — rejected for lack of clarity.

---

### `alert_duration`
- **What:** Expected duration in days.  
- **Design:** Optional `INTEGER`.  
- **Value:** Supports precise temporary tracking.  
- **Questions:** Should this be calculated from `start_date` and `end_date`?  
- **Alternatives:** Derive duration from date fields — still possible.

---

### `start_date`
- **What:** Date alert becomes active.  
- **Design:** Mandatory `DATE`.  
- **Value:** Establishes alert timeline.  
- **Questions:** Should this be editable post-creation?  
- **Alternatives:** Defaulting to `CURRENT_DATE` — rejected for explicit control.

---

### `end_date`
- **What:** Optional expiry or review trigger date.  
- **Design:** Optional `DATE`.  
- **Value:** Prevents indefinite activation.  
- **Alternatives:** None yet defined.

---

### `review_date`
- **What:** Date alert should be reviewed.  
- **Design:** Optional `DATE`.  
- **Value:** Encourages scheduled updates.  
- **Questions:** Should this be mandatory for certain alerts?  
- **Alternatives:** Derive from `alert_category`.

---

### `active`
- **What:** Whether the alert is currently in effect.  
- **Design:** Boolean, default `TRUE`.  
- **Value:** Enables archiving alerts without deletion.  
- **Questions:** Should this be computed from dates?  
- **Alternatives:** Using a status field instead.

---

### `last_updated`
- **What:** Timestamp of last update.  
- **Design:** Defaults to `CURRENT_TIMESTAMP`.  
- **Value:** Supports sorting, syncing, and auditing.  
- **Questions:** Should it auto-update on any field change?  
- **Alternatives:** Full audit history in another table.

---

### `updated_by`
- **What:** Person who last updated the alert.  
- **Design:** Optional `VARCHAR(100)`.  
- **Value:** Ensures change traceability.  
- **Questions:** Use unique user ID instead of names?  
- **Alternatives:** Link to internal user table.

---

## Table: `person_alert_codes`

### `alert_code_id`
- **What:** Unique internal ID for each alert code.  
- **Design:** Auto-incrementing `INTEGER` primary key.  
- **Value:** Enables joins without relying on visible codes.  
- **Questions:** Should it be exposed in APIs?  
- **Alternatives:** Composite key using `alert_code` + `alert_subcode`.

---

### `alert_code`
- **What:** Top-level category code (e.g., `MED1`).  
- **Design:** Mandatory `VARCHAR(10)`, manually defined.  
- **Value:** Enables hierarchical grouping and filters.  
- **Questions:** Do we have naming conventions?  
- **Alternatives:** Auto-generated codes — rejected for clarity.

---

### `alert_subcode`
- **What:** Specific alert code (e.g., `MED1.01`).  
- **Design:** Mandatory `VARCHAR(15)`.  
- **Value:** Human-readable identifier for alert types.  
- **Questions:** Should all subcodes start with their parent code?  
- **Alternatives:** Use UUIDs — rejected for lack of transparency.

---

### `alert_category`
- **What:** High-level grouping (e.g. Medical, Risk).  
- **Design:** Free text `VARCHAR(50)`.  
- **Value:** Allows analytics across alert types.  
- **Questions:** Should this be constrained by a lookup table?  
- **Alternatives:** ENUM or reference table — under review.

---

### `alert_name`
- **What:** Description of the alert group (e.g. "Respiratory Condition").  
- **Design:** Required `VARCHAR(100)`.  
- **Value:** Improves understanding of alert scope.  
- **Questions:** Should we align with clinical vocabularies (e.g. SNOMED)?  
- **Alternatives:** Using official ontologies — deprioritised for now.

---

### `alert_subname`
- **What:** Specific condition or risk (e.g. “Asthma”).  
- **Design:** Required `VARCHAR(100)`.  
- **Value:** Improves granularity and clarity.  
- **Questions:** Controlled list vs. open text?  
- **Alternatives:** Use a standardised dropdown — still open.

---

### `is_critical`
- **What:** Whether the alert poses life/safety risk.  
- **Design:** Boolean, default `FALSE`.  
- **Value:** Enables escalation and compliance workflows.  
- **Questions:** Who decides criticality?  
- **Alternatives:** Severity scale instead of binary — for future review.

---

### `is_awaab_relevant`
- **What:** Whether alert relates to Awaab’s Law (e.g. damp, mould).  
- **Design:** Boolean, default `FALSE`.  
- **Value:** Triggers additional regulatory response.  
- **Questions:** Should this be derived from alert type?  
- **Alternatives:** Lookup join with hazard categories — possibly future phase.

---

### `repairs_impact`
- **What:** Effect of alert on housing works.  
- **Design:** Controlled list (`High`, `Medium`, `Low`, `None`).  
- **Value:** Informs repairs and contractor workflows.  
- **Questions:** Should this be calculated or manually entered?  
- **Alternatives:** Numeric score — rejected for simplicity.

---

### `support_required`
- **What:** Instructions for frontline support (e.g. “Use interpreter”).  
- **Design:** Free text.  
- **Value:** Provides actionable field-level guidance.  
- **Questions:** Should this be structured or coded?  
- **Alternatives:** Binary flags per support type — deprioritised for now.

---

**End of Document**
